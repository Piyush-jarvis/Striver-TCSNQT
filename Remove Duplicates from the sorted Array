//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                              USING LOOP IN O(N) &O(1)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution{
public:
    int remove_duplicate(int arr[],int n){
        // code here
        if(n == 0 || n == 1)
        {
            return n;
        }
        
        int j = 0;
        for(int i = 0; i < n; i++)
        {
            if(arr[i] != arr[i+1])
            {
                arr[j] = arr[i];
                j++;
            }
        }
        
        arr[j] = arr[n-1];
        return j;
    }
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                              USING map IN O(N) &O(1)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void removeDups(int arr[], int n)
{
    // Hash map which will store the
    // elements which has appeared previously.
    unordered_map<int, bool> mp;
 
    for (int i = 0; i < n; ++i) {
 
        // Print the element if it is not
        // there in the hash map
        if (mp.find(arr[i]) == mp.end()) {
            cout << arr[i] << " ";
        }
 
        // Insert the element in the hash map
        mp[arr[i]] = true;
    }
}
 
