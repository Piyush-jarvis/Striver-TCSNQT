//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                          Time Complexity: O(N)
Kadane's Algorithm
                                                                           Space Complexity: O(1)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include<bits/stdc++.h>
using namespace std;

int maxProductSubArray(vector<int>& nums) {
    int prod1 = nums[0],prod2 = nums[0],result = nums[0];
    
    for(int i=1;i<nums.size();i++) {
        int temp = max({nums[i],prod1*nums[i],prod2*nums[i]});
        prod2 = min({nums[i],prod1*nums[i],prod2*nums[i]});
        prod1 = temp;
        
        result = max(result,prod1);
    }
    
    return result;
}

int main() {
    vector<int> nums = {1,2,-3,0,-4,-5};
    cout<<"The maximum product subarray: "<<maxProductSubArray(nums);
    return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                        Time Complexity: O(N2)
                                                                                         Auxiliary Space: O(1)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();

        int result = nums[0];
        for(int i = 0; i < n; i++)
        {
            int mul = nums[i];
            for(int j = i + 1; j < n; j++)
            {
                result = max(result, mul);
                mul *= nums[j];
            }
            result = max(result,mul);
        }
        return result;
    }
};
