//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                    Time Complexity : O(n)
                                                                    Space Complexity : O(n)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include<iostream>
#include<unordered_map>
using namespace std;

int main()
{
    int arr[] = {10, 30, 10, 20, 40, 20, 50, 10}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    
    unordered_map<int,int> map;
    
    for(int i = 0; i < n; i++)
    {
        map[arr[i]]++ ;
    }
    for(auto it = map.begin(); it != map.end(); it++)
    {
        if(it->second != 1)
        {
            cout << it->first <<" ";
        }
    }
    
    return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                             Time Complexity : O(n2)
                                                             Space Complexity : O(n)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include<iostream>
#include<map>
using namespace std;

int main()
{
    int arr[] = {10, 30, 30, 20, 40, 20, 50, 10}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    
    int visited[n];
    for(int i = 0; i < n; i++)
    {
        if(visited[i] != 1)
        {
            int count = 1;
            for(int j = i+1; j < n; j++)
            {
                if(arr[i] == arr[j])
                {
                    count++;
                    visited[j] = 1;
                }
            }
            if(count != 1)
            {
                cout << arr[i] << " ";
            }
        }
    }
    
    return 0;
}


